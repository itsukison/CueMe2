name: Release

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:
    inputs:
      version:
        description: "Version to release (e.g., v1.0.0)"
        required: false
        type: string

permissions:
  contents: write

jobs:
  release:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macos-latest
            platform: mac
          - os: ubuntu-latest
            platform: linux
          - os: windows-latest
            platform: win

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        if: hashFiles('pnpm-lock.yaml') != ''
        with:
          version: latest

      - name: Clean package manager cache
        run: |
          echo "Cleaning package manager cache..."
          rm -rf node_modules
          npm cache clean --force || true

      - name: Install dependencies
        run: |
          if [ -f "pnpm-lock.yaml" ]; then
            echo "Using pnpm..."
            pnpm install --frozen-lockfile
          elif [ -f "package-lock.json" ]; then
            echo "Using npm..."
            npm ci
          else
            echo "Using npm (fallback)..."
            npm install
          fi

      - name: Install Linux dependencies
        if: matrix.platform == 'linux'
        run: |
          echo "Installing Linux dependencies for Electron..."
          sudo apt-get update
          sudo apt-get install -y libnss3-dev libatk-bridge2.0-dev libdrm2 libxkbcommon-dev libxss1 libasound2-dev libxtst6 libatspi2.0-0 libdrm2 libxdamage1 libxrandr2 libgbm1 libxcomposite1 libxcursor1 libxi6 libgtk-3-0
          echo "Linux dependencies installed successfully"

      - name: Build and release for platform
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CSC_IDENTITY_AUTO_DISCOVERY: false
          CSC_LINK: ""
          CSC_KEY_PASSWORD: ""
          DEBUG: "electron-builder"
        run: |
          echo "Starting build for platform: ${{ matrix.platform }}"
          echo "Node version: $(node --version)"
          echo "NPM version: $(npm --version)"
          echo "Current directory: $(pwd)"
          
          echo "Running npm run build..."
          npm run build
          
          echo "Running electron-builder..."
          npx electron-builder --publish=always --${{ matrix.platform }} --verbose
          
          echo "Build completed for ${{ matrix.platform }}"

      - name: Debug - List build artifacts
        run: |
          echo "Listing release directory contents:"
          ls -la release/ || echo "No release directory found"
          echo "Listing all build outputs:"
          find . -name "*.dmg" -o -name "*.zip" -o -name "*.exe" -o -name "*.AppImage" 2>/dev/null || echo "No build artifacts found"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        if: always() && hashFiles('release/**') != ''
        continue-on-error: true
        with:
          name: release-${{ matrix.os }}
          path: release/
